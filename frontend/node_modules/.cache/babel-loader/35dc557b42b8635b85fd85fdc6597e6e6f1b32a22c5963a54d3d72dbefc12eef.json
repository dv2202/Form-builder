{"ast":null,"code":"var _jsxFileName = \"/Users/devanshvishwakarma/Desktop/Task-Builder/frontend/src/components/FormPreview.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction FormPreview({\n  form\n}) {\n  _s();\n  const [responses, setResponses] = useState({});\n  const handleResponse = (questionId, response) => {\n    setResponses({\n      ...responses,\n      [questionId]: response\n    });\n  };\n  const submitForm = () => {\n    // Here you would typically send the form responses to your backend\n    console.log('Form responses:', responses);\n  };\n  const renderQuestion = (question, index) => {\n    switch (question.type) {\n      case 'categorize':\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mb-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"font-bold mb-2\",\n            children: \"Categorize\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 20,\n            columnNumber: 13\n          }, this), question.data.items.map(item => {\n            var _responses$question$i;\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"mb-2\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                children: item.content\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 23,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                value: ((_responses$question$i = responses[question.id]) === null || _responses$question$i === void 0 ? void 0 : _responses$question$i[item.id]) || '',\n                onChange: e => handleResponse(question.id, {\n                  ...responses[question.id],\n                  [item.id]: e.target.value\n                }),\n                className: \"ml-2 p-2 border rounded\",\n                children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"\",\n                  children: \"Select category\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 29,\n                  columnNumber: 19\n                }, this), question.data.categories.map(category => /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: category.id,\n                  children: category.name\n                }, category.id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 31,\n                  columnNumber: 21\n                }, this))]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 24,\n                columnNumber: 17\n              }, this)]\n            }, item.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 22,\n              columnNumber: 15\n            }, this);\n          })]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 11\n        }, this);\n      case 'cloze':\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mb-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"font-bold mb-2\",\n            children: \"Fill in the blanks\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 13\n          }, this), question.data.text.split('[blank]').map((part, i, array) => {\n            var _responses$question$i2;\n            return /*#__PURE__*/_jsxDEV(React.Fragment, {\n              children: [part, i < array.length - 1 && /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                value: ((_responses$question$i2 = responses[question.id]) === null || _responses$question$i2 === void 0 ? void 0 : _responses$question$i2[i]) || '',\n                onChange: e => handleResponse(question.id, {\n                  ...responses[question.id],\n                  [i]: e.target.value\n                }),\n                className: \"mx-1 p-1 border rounded\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 46,\n                columnNumber: 19\n              }, this)]\n            }, i, true, {\n              fileName: _jsxFileName,\n              lineNumber: 43,\n              columnNumber: 15\n            }, this);\n          })]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 11\n        }, this);\n      case 'comprehension':\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mb-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"font-bold mb-2\",\n            children: \"Comprehension\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"mb-2\",\n            children: question.data.passage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 13\n          }, this), question.data.questions.map(q => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mb-2\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: q.text\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 17\n            }, this), q.options.map((option, i) => {\n              var _responses$question$i3;\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"radio\",\n                  id: `${q.id}-${i}`,\n                  name: q.id,\n                  value: option,\n                  checked: ((_responses$question$i3 = responses[question.id]) === null || _responses$question$i3 === void 0 ? void 0 : _responses$question$i3[q.id]) === option,\n                  onChange: e => handleResponse(question.id, {\n                    ...responses[question.id],\n                    [q.id]: e.target.value\n                  })\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 67,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                  htmlFor: `${q.id}-${i}`,\n                  className: \"ml-2\",\n                  children: option\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 75,\n                  columnNumber: 21\n                }, this)]\n              }, i, true, {\n                fileName: _jsxFileName,\n                lineNumber: 66,\n                columnNumber: 19\n              }, this);\n            })]\n          }, q.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 15\n          }, this))]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }, this);\n      default:\n        return null;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"space-y-4\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-2xl font-bold\",\n      children: form.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), form.headerImage && /*#__PURE__*/_jsxDEV(\"img\", {\n      src: form.headerImage,\n      alt: \"Header\",\n      className: \"w-full h-auto mb-4\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 28\n    }, this), form.questions.map((question, index) => renderQuestion(question, index)), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: submitForm,\n      className: \"bg-green-500 text-white px-4 py-2 rounded\",\n      children: \"Submit Form\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n}\n_s(FormPreview, \"p+LtuSuoZ5ZrfQiq0O4NAZmwL9s=\");\n_c = FormPreview;\nexport default FormPreview;\nvar _c;\n$RefreshReg$(_c, \"FormPreview\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","FormPreview","form","_s","responses","setResponses","handleResponse","questionId","response","submitForm","console","log","renderQuestion","question","index","type","className","children","fileName","_jsxFileName","lineNumber","columnNumber","data","items","map","item","_responses$question$i","content","value","id","onChange","e","target","categories","category","name","text","split","part","i","array","_responses$question$i2","Fragment","length","passage","questions","q","options","option","_responses$question$i3","checked","htmlFor","title","headerImage","src","alt","onClick","_c","$RefreshReg$"],"sources":["/Users/devanshvishwakarma/Desktop/Task-Builder/frontend/src/components/FormPreview.js"],"sourcesContent":["import React, { useState } from 'react';\n\nfunction FormPreview({ form }) {\n  const [responses, setResponses] = useState({});\n\n  const handleResponse = (questionId, response) => {\n    setResponses({ ...responses, [questionId]: response });\n  };\n\n  const submitForm = () => {\n    // Here you would typically send the form responses to your backend\n    console.log('Form responses:', responses);\n  };\n\n  const renderQuestion = (question, index) => {\n    switch (question.type) {\n      case 'categorize':\n        return (\n          <div key={index} className=\"mb-4\">\n            <h3 className=\"font-bold mb-2\">Categorize</h3>\n            {question.data.items.map((item) => (\n              <div key={item.id} className=\"mb-2\">\n                <span>{item.content}</span>\n                <select\n                  value={responses[question.id]?.[item.id] || ''}\n                  onChange={(e) => handleResponse(question.id, { ...responses[question.id], [item.id]: e.target.value })}\n                  className=\"ml-2 p-2 border rounded\"\n                >\n                  <option value=\"\">Select category</option>\n                  {question.data.categories.map((category) => (\n                    <option key={category.id} value={category.id}>{category.name}</option>\n                  ))}\n                </select>\n              </div>\n            ))}\n          </div>\n        );\n      case 'cloze':\n        return (\n          <div key={index} className=\"mb-4\">\n            <h3 className=\"font-bold mb-2\">Fill in the blanks</h3>\n            {question.data.text.split('[blank]').map((part, i, array) => (\n              <React.Fragment key={i}>\n                {part}\n                {i < array.length - 1 && (\n                  <input\n                    type=\"text\"\n                    value={responses[question.id]?.[i] || ''}\n                    onChange={(e) => handleResponse(question.id, { ...responses[question.id], [i]: e.target.value })}\n                    className=\"mx-1 p-1 border rounded\"\n                  />\n                )}\n              </React.Fragment>\n            ))}\n          </div>\n        );\n      case 'comprehension':\n        return (\n          <div key={index} className=\"mb-4\">\n            <h3 className=\"font-bold mb-2\">Comprehension</h3>\n            <p className=\"mb-2\">{question.data.passage}</p>\n            {question.data.questions.map((q) => (\n              <div key={q.id} className=\"mb-2\">\n                <p>{q.text}</p>\n                {q.options.map((option, i) => (\n                  <div key={i}>\n                    <input\n                      type=\"radio\"\n                      id={`${q.id}-${i}`}\n                      name={q.id}\n                      value={option}\n                      checked={responses[question.id]?.[q.id] === option}\n                      onChange={(e) => handleResponse(question.id, { ...responses[question.id], [q.id]: e.target.value })}\n                    />\n                    <label htmlFor={`${q.id}-${i}`} className=\"ml-2\">{option}</label>\n                  </div>\n                ))}\n              </div>\n            ))}\n          </div>\n        );\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      <h2 className=\"text-2xl font-bold\">{form.title}</h2>\n      {form.headerImage && <img src={form.headerImage} alt=\"Header\" className=\"w-full h-auto mb-4\" />}\n      {form.questions.map((question, index) => renderQuestion(question, index))}\n      <button\n        onClick={submitForm}\n        className=\"bg-green-500 text-white px-4 py-2 rounded\"\n      >\n        Submit Form\n      </button>\n    </div>\n  );\n}\n\nexport default FormPreview;\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}